{"version":3,"sources":["images/logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","theme","createMuiTheme","palette","primary","main","secondary","light","contrastText","contrastThreshold","tonalOffset","ThemeProvider","className","Container","maxWidth","Grid","container","justify","item","List","component","ListItem","Fab","color","aria-label","size","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2IAAAA,EAAOC,QAAU,IAA0B,kC,kRC0L5BC,MAlKf,WAEE,IAAMC,EAAQC,YAAe,CAC3BC,QAAS,CACPC,QAAS,CAEPC,KAAM,WAIRC,UAAW,CACTC,MAAO,UACPF,KAAM,UAENG,aAAc,WAIhBC,kBAAmB,EAInBC,YAAa,MAGjB,OACE,kBAACC,EAAA,EAAD,CAAeV,MAAOA,GACtB,yBAAKW,UAAU,UAoBb,kBAACC,EAAA,EAAD,CAAWC,SAAS,KAClB,kBAACC,EAAA,EAAD,CACEC,WAAS,EACTC,QAAQ,SACRL,UAAU,mBAEV,kBAACG,EAAA,EAAD,CACEG,MAAI,EACJN,UAAU,SAFZ,yCAI0C,0BAAMA,UAAU,SAAhB,4BACtC,kBAACO,EAAA,EAAD,CACEC,UAAU,MACVR,UAAU,QAEV,kBAACS,EAAA,EAAD,CACET,UAAU,YAER,kBAAC,IAAD,MAHJ,mBAMA,kBAACS,EAAA,EAAD,CACET,UAAU,YAER,kBAAC,IAAD,MAHJ,0BAMA,kBAACS,EAAA,EAAD,CACET,UAAU,YAER,kBAAC,IAAD,MAHJ,kCAMA,kBAACS,EAAA,EAAD,CACET,UAAU,YAER,kBAAC,IAAD,MAHJ,4BAMA,kBAACS,EAAA,EAAD,CACET,UAAU,YAER,kBAAC,IAAD,MAHJ,uBAQN,kBAACG,EAAA,EAAD,CACEG,MAAI,EACJN,UAAU,WAEV,yBAAKA,UAAU,SAEf,yBAAKA,UAAU,mBACX,yBAAKA,UAAU,OACb,kBAACU,EAAA,EAAD,CACEC,MAAM,UACNC,aAAW,kBACXC,KAAK,QACLb,UAAU,OAEV,kBAAC,IAAD,SAIR,yBAAKA,UAAU,mBACX,yBAAKA,UAAU,cACb,kBAACU,EAAA,EAAD,CACEC,MAAM,UACNC,aAAW,yBACXZ,UAAU,OAEV,kBAAC,IAAD,QAGJ,yBAAKA,UAAU,cACb,kBAACU,EAAA,EAAD,CACEC,MAAM,UACNC,aAAW,4BACXZ,UAAU,OAEV,kBAAC,IAAD,SAIR,yBAAKA,UAAU,mBACX,yBAAKA,UAAU,kBACb,kBAACU,EAAA,EAAD,CACEC,MAAM,UACNC,aAAW,2BACXZ,UAAU,OAEV,kBAAC,IAAD,QAGJ,yBAAKA,UAAU,kBACb,kBAACU,EAAA,EAAD,CACEC,MAAM,UACNC,aAAW,MACXZ,UAAU,OAEV,kBAAC,IAAD,gBChKAc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.73bf86d2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './images/logo.svg';\nimport Button from '@material-ui/core/Button';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\n\nimport indigo from '@material-ui/core/colors/indigo';\nimport grey from '@material-ui/core/colors/grey';\nimport Fab from'@material-ui/core/Fab';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport AccountBalanceOutlinedIcon from '@material-ui/icons/AccountBalanceOutlined';\nimport VoicemailOutlinedIcon from '@material-ui/icons/VoicemailOutlined';\nimport VpnKeyOutlinedIcon from '@material-ui/icons/VpnKeyOutlined';\nimport LocalAtmOutlinedIcon from '@material-ui/icons/LocalAtmOutlined';\nimport BathtubOutlinedIcon from '@material-ui/icons/BathtubOutlined';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport InboxIcon from '@material-ui/icons/Inbox';\n\nimport Grid from '@material-ui/core/Grid';\nimport Container from '@material-ui/core/Container';\nimport './css/App.css';\n\nfunction App() {\n  // const testCol = \"#3f4a75\";\n  const theme = createMuiTheme({\n    palette: {\n      primary: {\n        // light: will be calculated from palette.primary.main,\n        main: '#ffffff',\n        // dark: will be calculated from palette.primary.main,\n        // contrastText: will be calculated to contrast with palette.primary.main\n      },\n      secondary: {\n        light: '#0066ff',\n        main: '#ffffff',\n        // dark: will be calculated from palette.secondary.main,\n        contrastText: '#3f4a75',\n      },\n      // Used by `getContrastText()` to maximize the contrast between\n      // the background and the text.\n      contrastThreshold: 3,\n      // Used by the functions below to shift a color's luminance by approximately\n      // two indexes within its tonal palette.\n      // E.g., shift from Red 500 to Red 300 or Red 700.\n      tonalOffset: 0.2,\n    },\n  });\n  return (\n    <ThemeProvider theme={theme}>\n    <div className=\"App bg\">\n      {/* <header className=\"App-header bg\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Lets build an App!!!! :)\n        </a>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n        >Start\n        </Button>\n      </header> */}\n      <Container maxWidth=\"m\">\n        <Grid \n          container\n          justify=\"center\"\n          className=\"bg main_wrapper\"\n        >\n          <Grid \n            item\n            className=\"txt_1\"\n          >\n              Are you making the most of your money <span className=\"txt_2\">whatever your life stage</span>\n              <List \n                component=\"nav\"\n                className=\"list\"\n              >\n                <ListItem\n                  className=\"listItem\"\n                >\n                    <ChevronRightIcon />\n                    Getting Started\n                </ListItem>\n                <ListItem\n                  className=\"listItem\"\n                >\n                    <ChevronRightIcon />\n                    Focusing on the future\n                </ListItem>\n                <ListItem\n                  className=\"listItem\"\n                >\n                    <ChevronRightIcon />\n                    Thinking about your retirement\n                </ListItem>\n                <ListItem\n                  className=\"listItem\"\n                >\n                    <ChevronRightIcon />\n                    Enjoying your retirement\n                </ListItem>\n                <ListItem\n                  className=\"listItem\"\n                >\n                    <ChevronRightIcon />\n                    Creating a legacy\n                </ListItem>\n              </List>\n          </Grid>\n          <Grid \n            item\n            className=\"pic_1_1\"\n          >\n            <div className=\"pic_1\">\n            {/* make into component for final production */}\n            <div className=\"inner_row row_1\">\n                <div className=\"btn\">\n                  <Fab \n                    color=\"primary\" \n                    aria-label=\"getting started\"\n                    size=\"large\"\n                    className=\"fab\"\n                  >\n                    <AccountBalanceOutlinedIcon />\n                  </Fab>\n                </div>\n            </div>\n            <div className=\"inner_row row_2\">\n                <div className=\"btn btn_lh\">\n                  <Fab \n                    color=\"primary\" \n                    aria-label=\"focusing on the future\"\n                    className=\"fab\"\n                  >\n                    <VoicemailOutlinedIcon />\n                  </Fab>\n                </div>\n                <div className=\"btn btn_rh\">\n                  <Fab \n                    color=\"primary\" \n                    aria-label=\"thinking about retirement\"\n                    className=\"fab\"\n                  >\n                    <VpnKeyOutlinedIcon />\n                  </Fab>\n                </div>\n            </div>\n            <div className=\"inner_row row_3\">\n                <div className=\"btn btn_btm_lh\">\n                  <Fab \n                    color=\"primary\" \n                    aria-label=\"enjoying your retirement\"\n                    className=\"fab\"\n                  >\n                    <LocalAtmOutlinedIcon />\n                  </Fab>\n                </div>\n                <div className=\"btn btn_btm_rh\">\n                  <Fab \n                    color=\"primary\" \n                    aria-label=\"add\"\n                    className=\"fab\"\n                  >\n                    <BathtubOutlinedIcon />\n                  </Fab>\n                </div>\n            </div>\n            </div>\n          </Grid>\n        </Grid>\n      </Container>\n      \n    </div>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}